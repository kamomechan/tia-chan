[{"content":"如果你对 RSS 有一定的了解，可以查看右边的索引，跳转到自己需要的地方唷\u0026gt;\u0026lt;\n什么是 RSS 呢 梦开始的地方\n简单来说，RSS就像是一个新闻订阅服务，用户可以通过订阅自己喜欢的网站的RSS源，获取这些网站的最新内容和更新，而无需每次都去访问这些网站。用户可以将订阅的RSS源集中在一个地方，方便浏览和阅\n读。 -ChatGPT\n如何使用 RSS 源 RSSHub 提供了一些公共RSS源，搜索自己喜欢的网站进行查找\n这里以月幕Gal RSS源为例：\n最后的最后，复制链接到RSS阅读器，点击添加订阅就可以啦w\nTwitter的RSS源可以看这篇：Nitter 403 的解决方案\n手机端RSS阅读器可以使用开源的 Feeder\n电脑端RSS阅读器可以使用开源的 Fluent Reader\n想要全平台同步可以使用公共Telegram机器人订阅RSS源，由于是公共的可能会有延迟，下面将会介绍如何部署一个自己的Telegram机器人wwww\n如何制作自己的 RSS 源 呜呜呜呜呜呜！找不到自己喜欢的RSS源怎么办，那当然是去RSSHub上提issues呀\n那人家也不理我怎么办qwq\n那就自己来做一个！利用huginn制作RSS源\n1. 下载安装篇 1.1 在linux中安装docker 1 curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh --mirror Aliyun 1.2 启动docker容器（等待一分钟左右） 1 screen -S huginndocker run -it -p 3000:3000 ghcr.io/huginn/huginn 最后 ctrl+a+d 退出 screen\n1.3 在浏览器中打开Huginn http://localhost:3000\nlocalhost替换为你自己的ip，然后打开（如图）\n点击login，用户名与密码分别默认为admin与password\n1.4 设置账户 为保证账户安全，点击account菜单，选择account修改账户密码\n2. 为Huginn使用做准备 2.1 准备 phantomjscloud Apikey 需要注册一个phantomjscloud账户，用来渲染动态网页成静态页面，注册好后从中获取ApiKey\n2.2 在Huginn中新建凭证（Credentials） 在Huginn中使用ApiKey\n3. 如何使用Huginn 3.1 概述 一共分为4步：\n利用PhantomJs agent将动态网页转成静态网页 利用Website agent解析提取文章标题 利用Website agent解析提取文章内容 利用DataOutputAgent将解析的东西转成RSS源 3.2 将动态网页转成静态网页 这里以制作Keyfc论坛 RSS源为例\n点击新建代理（Agent）（没有说明的内容默认就行，不需要填写）\nUser agent：\n1 Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 3.3 提取文章标题与时间 点击新建代理（Agent）（Website Agent类型）\n获取xpath路径可以用f12弹出控制台，然后点击选择元素，之后在页面中选择标题\n点击文章标题可以看见这个样子\n我们可以在控制台看见文章标题，右键选中，点击copy full xpath\n可以看见完整的xpath路径是这个样子的\n1 /html/body/div[4]/div[3]/div/div[3]/table/tbody[1]/tr/th/a[1] 由于不同文章的xpath路径有可能不同，所以我们需要对这个路径做一些修改(不然抓取的文章只有这一个)\n我们主要通过对比不同文章之间的xpath路径进行修改\n以相同方式，复制第二篇文章完整xpath路径，如下\n1 /html/body/div[4]/div[3]/div/div[3]/table/tbody[2]/tr/th/a[1] 方法：找不同，来删除 （快背，快背，考试要考的\u0026gt;\u0026lt;）\n通过对比，可以看见最后的部分不同，删除不同之处，可以得到下面的xpath\n1 /html/body/div[4]/div[3]/div/div[3]/table/tbody/tr/th/a[1] 那有的时候通过对比，没有不同之处怎么办呢？\n笨\u0026hellip;笨蛋！不修改不就行了嘛\n以相同的方式获取发布时间\n分别获取的第一篇与第二篇文章的发布时间\n1 2 /html/body/div[4]/div[3]/div/div[3]/table/tbody[1]/tr/td[3]/em /html/body/div[4]/div[3]/div/div[3]/table/tbody[2]/tr/td[3]/em 删除两者不同的地方，得到一下内容\n1 /html/body/div[4]/div[3]/div/div[3]/table/tbody/tr/td[3]/em 点击两次Dry Run运行下看看\n抓取成功啦，但是url有些问题，可以使用模板（template）使它们拼接起来\n1 \u0026#34;template\u0026#34;: { \u0026#34;url1\u0026#34;: \u0026#34;{{ url | to_uri: _response_.url }}\u0026#34; } 点击两次Dry Run运行下看看\n完成！\n3.4 提取文章内容 点击新建代理（Agent）（Website Agent类型）\n点击标题链接查看文章内容，并以相同方式获取xpath路径\n分别获取的第一篇与第二篇文章的内容xpath路径\n1 /html/body/div[4]/div[5]/div/form[1]/div/table[1]/tbody[1]/tr/td[2]/div[4]/div[2]/div/html/body/div[4]/div[5]/div/form[1]/div/table[1]/tbody[1]/tr/td[2]/div[4]/div[2]/div 通过对比没有不同之处，不需要修改\n完成！\n3.5 转成RSS源 点击actions菜单，选择show\n这个后缀为.xml的链接就是你做的RSS源啦（啪唧啪唧，鼓掌www）\n3.6 常见问题 如果遇到下面的working状态为no\n记得点击抓取标题的那个代理的event created（即keyfc 1）\n重新发送一个就好啦（记得不要发送相同的内容，不然会重复）\n部署 Telegram RSS Reader Bot 项目地址：Bot\n1. 部署 1.1 下载安装篇 1 mkdir rssttcd rssttwget https://raw.githubusercontent.com/Rongronggg9/RSS-to-Telegram-Bot/dev/docker-compose.yml.sample -O docker-compose.yml 1.2 准备与配置 转向 @BotFather ，发送 /newbot 创建一个新的机器人，获取 token\n转向 @userinfobot 获取您的用户 ID（环境变量：）MANAGER。\n获取 Telegraph API 访问令牌（环境变量：）TELEGRAPH_TOKEN。每次获得新令牌时刷新页面。如果您有很多订阅，请确保获得至少 5 个代币。\n编辑 docker-compose.yml 文件，替换 token , MANAGER , TELEGRAPH_TOKEN\n1 vi docker-compose.yml 更新\n1 docker-compose up -d 完结撒花！！\n","date":"2023-10-22T12:54:54+08:00","image":"https://tia-chan.top/p/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA-rss-%E6%BA%90/cover_hubee0217edc81f386ea81541ec69b7714_1615958_120x120_fill_box_smart1_3.png","permalink":"https://tia-chan.top/p/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA-rss-%E6%BA%90/","title":"如何制作一个 RSS 源"},{"content":"更换实例 由于nitter.net截至现在已经不支持rss\n可以用https://twiiit.com/随机选择一个nitter实例替代\n比如：https://twiiit.com/nwsseveretstorm/rss\nSource：Link\n","date":"2023-10-22T12:50:29+08:00","image":"https://tia-chan.top/p/nitter-rss-403-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1_hu93e3c99505f97409518dba68583bbc1c_478384_120x120_fill_q75_box_smart1.jpg","permalink":"https://tia-chan.top/p/nitter-rss-403-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","title":"Nitter Rss 403 的解决方案"},{"content":"报错信息： 1 error: externally-managed-environment 解决方案： 1 sudo mv /usr/lib/python3.11/EXTERNALLY-MANAGED /usr/lib/python3.11/EXTERNALLY-MANAGED.old 使用这个命令传递错误就可以啦！\n碎碎念 呜呜呜呜呜，一开始遇到这个错误，找到半天解决方案都不行！！被打\n最后在这里才找到办法www：link\n","date":"2023-10-22T12:46:19+08:00","image":"https://tia-chan.top/p/pip3-install-%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1_huc95fec0b77e78bdb5b0cfe622ccf9469_3232201_120x120_fill_box_smart1_3.png","permalink":"https://tia-chan.top/p/pip3-install-%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","title":"pip3 install 报错的解决方案"},{"content":"Song(＾▽＾) そらたね まっすぐに羽を伸ばし 傷痕 愈し続けるたび\n我的双翼会一直张开 每当持续治疗之时\n私はそれでもいい 誰かの為に\n即便如此我也愿意 因为这是为了人们\n飛び立てることに もう少し 喜び感じでいたいから\n也因为我希望能稍微飞翔起来而感觉到高兴\nあなたとここで出会えたこと 奇跡と 呼ばせてください\n请你把我们的相遇称呼为奇迹\nOverthesky 遠くを見つめてる\n飞越天空 遥望远方\nその目に 光が指すように\n双眼如同指向光芒一样\nOpenthemind 世界を\n敞开心怀 世界必定能改变\nきっと変えてゆく そして 空へ\n然后再次飞向天空\n時々不安になる 私に何ができるのだろう\n有时候我会感觉到担心 我究竟能够做什么？\n時間は無限じゃない そんな中で\n时间并非无限 而我正在此间\n生きできた時間の中には 忘れたいこともあるけど\n在我所生活过的时光里有我很想忘却掉的痛苦经历\n誰かとは立ち会えるのなら 記憶は 輝き始める\n但如果能和谁一起分享我的经历 这份记忆将会开始闪闪发光\nOverthesky 全てが終わる時\n飞越天空 当一切结束后\nその手で 強く抱きしめて\n请用那双手紧紧拥抱着我\nOpenthemind 真実\n敞开心怀\n分かる日が来ても ずっと\n即使明白了真相 也要追寻永恒\n突然 見つけた希望\n突然找到的希望\n偶然 舞い降りできた夢\n偶然降落在了我们身上\nOverthesky 遠くを見つめてる\n飞越天空 遥望远方\nその目は 光に満ちでいる\n双眼充满了希望之光\nOpenthemind 世界をきっと変えてゆく そして\n敞开心怀 世界必定能改变 然后…\nOverthesky 遥かな物語\n飞越天空 追寻遥远的故事\nまだ見ぬ景色が呼んでる\n那里还有更多未知的景色呼唤着我们\nOpenthemind 世界に光が差すとき\n敞开心怀 当世界充满光芒的时候\n笑ってどこかで 見ているから\n我一定会微笑着在某处注视着你\nTHX ","date":"2023-10-22T11:27:07+08:00","image":"https://tia-chan.top/p/welcome/1_hu97a0851776278e5381a377448e0936e8_419392_120x120_fill_q75_box_smart1.jpg","permalink":"https://tia-chan.top/p/welcome/","title":"Welcome"}]